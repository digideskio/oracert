/*
    * * IDENTITY COLUMNS  * *

 column_name   datatype   GENERATED ( ALWAYS | BY DEFAULT [AS NULL]) AS IDENTITY

https://oracle-base.com/articles/12c/identity-columns-in-oracle-12cr1
*/
/* 
GENERATED ALWAYS AS IDENTITY 
=================================
Using ALWAYS forces the use of the identity. If an insert statement references 
the identity column, even to specify a NULL value, an error is produced.
*/

CREATE TABLE identity_test_tab (
  id          NUMBER GENERATED ALWAYS AS IDENTITY,
  description VARCHAR2(30)
);

-- OK
INSERT INTO identity_test_tab (description) VALUES ('Just DESCRIPTION');

-- This will fail because we're trying to inser value in the ID column
INSERT INTO identity_test_tab (id, description) VALUES (999, 'ID=999 and DESCRIPTION');

-- This will fail because we're trying to inser a NULL in the ID column
INSERT INTO identity_test_tab (id, description) VALUES (NULL, 'ID=NULL and DESCRIPTION');

/*
GENERATED BY DEFAULT AS IDENTITY 
=================================
Using BY DEFAULT allows you to use the identity if the column isn't 
referenced in the insert statement, but if the column is referenced, 
the specified value will be used in place of the identity. 
Attempting to specify the value NULL in this case results in an error, 
since identity columns are always NOT NULL.
*/

DROP TABLE identity_test_tab PURGE;

CREATE TABLE identity_test_tab (
  id          NUMBER GENERATED BY DEFAULT AS IDENTITY,
  description VARCHAR2(30)
);

-- OK
INSERT INTO identity_test_tab (description) VALUES ('Just DESCRIPTION');

-- OK
INSERT INTO identity_test_tab (id, description) VALUES (999, 'ID=999 and DESCRIPTION');

-- This will fail because we're trying to insert a NULL in the ID column
INSERT INTO identity_test_tab (id, description) VALUES (NULL, 'ID=NULL and DESCRIPTION');

/*
GENERATED BY DEFAULT ON NULL AS IDENTITY 
=================================================
Using BY DEFAULT ON NULL allows the identity to be used if 
the identity column is referenced, but a value of NULL is specified.
*/

DROP TABLE identity_test_tab PURGE;

CREATE TABLE identity_test_tab (
  id          NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY,
  description VARCHAR2(30)
);

-- OK
INSERT INTO identity_test_tab (description) VALUES ('Just DESCRIPTION');

-- OK
INSERT INTO identity_test_tab (id, description) VALUES (999, 'ID=999 and DESCRIPTION');

-- OK
INSERT INTO identity_test_tab (id, description) VALUES (NULL, 'ID=NULL and DESCRIPTION');

/* ============ A NOTE ON PERFORMANCE =============
Not surprisingly, trigger-based test performs much worse than the others. 
The direct use of a sequence and the 12c identity column give comparable results, 
which are typically an order of magnitude faster than using a trigger to populate
the ID column.
*/

SELECT * FROM identity_test_tab;


/*
Based on the requirement for the CREATE SEQUENCE privilege, it is not difficult 
to deduce that a sequence is being used to populate the identity column.
*/
SELECT object_name, object_type
FROM   user_objects;

/*
The [DBA|ALL|USER]_TAB_IDENTITY_COLS views show information about identity columns.
*/

SELECT table_name, 
       column_name,
       generation_type,
       identity_options
FROM   all_tab_identity_cols
WHERE  owner = 'ORACERT'
ORDER BY 1, 2;


/*
The link between the table and the sequence is stored in the SYS.IDNSEQ$ table.
*/

/* tear down */
DROP TABLE identity_test_tab PURGE;
